[
  {
    "index": 505,
    "pr title": "[Soc2014] Official meta API",
    "comment": "A quick question on API correctness:\n`opts.field_names` API can also return more than 1 name for each field, this usually happens with ForeignKeys, where fields can be fetched by property or property_id.\n\nThis is an example where `manager` is a ForeignKey: `{u'id', 'item', 'manager', u'manager_id', 'name'}`\n\nDo you think this is the correct way to go? or shall we exclude duplicates from `field_names`?\n",
    "label": 1
  },
  {
    "index": 506,
    "pr title": "[Soc2014] Official meta API",
    "comment": "Gut reaction: I'd certainly expect it to only return the canonical attribute names, and not the `_id` variants.\n\nSo long as the API gives enough information for users to be able to derive the \"_id\" style ones if needed then that would seem sufficient.\n",
    "label": 1
  },
  {
    "index": 507,
    "pr title": "[Soc2014] Official meta API",
    "comment": "@tomchristie interestingly Django also uses the *_id stuff internally. I suggest we keep the possibility of Django fetching fields by *_id using get_field(), but we remove duplicates in field_names\n",
    "label": 1
  },
  {
    "index": 508,
    "pr title": "[Soc2014] Official meta API",
    "comment": "@PirosB3 What's the hold-up in using `_meta.fields` as the main (and only) entry point? Is that backward compatibility because `fields` doesn't have \"fake\" fields like reverse relations?\n\nIf that's the case I think we have here a unique opportunity to get it right and it's easy enough to provide an upgrade path.\n",
    "label": 1
  }
]